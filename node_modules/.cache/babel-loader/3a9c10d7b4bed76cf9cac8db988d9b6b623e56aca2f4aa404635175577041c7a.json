{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\n// Исходные контакты телефона\nconst phoneContacts = {\n  items: [{\n    id: 'id-1',\n    name: 'Steve Jobs',\n    number: '459-12-56'\n  }, {\n    id: 'id-2',\n    name: 'Bill Gates',\n    number: '443-89-12'\n  }, {\n    id: 'id-3',\n    name: 'Elon Musk',\n    number: '645-17-79'\n  }, {\n    id: 'id-4',\n    name: 'Mark Zuckerberg',\n    number: '227-91-26'\n  }]\n};\n\n// Создание среза контактов с использованием createSlice\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  // Имя среза контактов\n  initialState: phoneContacts,\n  // Начальное состояние контактов\n  reducers: {\n    addContact: {\n      reducer(state, action) {\n        state.items.push(action.payload); // Добавление нового контакта в список контактов\n      }\n    },\n\n    prepare(newContact) {\n      return {\n        payload: {\n          id: nanoid(),\n          ...newContact\n        } // Подготовка данных для добавления контакта с уникальным идентификатором\n      };\n    },\n\n    removeContact(state, action) {\n      const index = state.items.findIndex(contact => contact.id !== action.payload);\n      state.items.splice(index, 1); // Удаление контакта из списка контактов\n    }\n  }\n});\n\n// Экспорт действий addContact и removeContact из среза контактов\nexport const {\n  addContact,\n  removeContact\n} = contactsSlice.actions;\n\n// Создание персистентного редьюсера для сохранения состояния контактов с использованием redux-persist\nexport const contactsReducer = persistReducer({\n  key: 'contacts',\n  storage\n}, contactsSlice.reducer);","map":{"version":3,"names":["createSlice","nanoid","persistReducer","storage","phoneContacts","items","id","name","number","contactsSlice","initialState","reducers","addContact","reducer","state","action","push","payload","prepare","newContact","removeContact","index","findIndex","contact","splice","actions","contactsReducer","key"],"sources":["/Users/victorsvertoka/Desktop/projects/goit-react-hw-06-phonebook/src/redux/contactsSlice.js"],"sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\n// Исходные контакты телефона\nconst phoneContacts = {\n  items: [\n    { id: 'id-1', name: 'Steve Jobs', number: '459-12-56' },\n    { id: 'id-2', name: 'Bill Gates', number: '443-89-12' },\n    { id: 'id-3', name: 'Elon Musk', number: '645-17-79' },\n    { id: 'id-4', name: 'Mark Zuckerberg', number: '227-91-26' },\n  ],\n};\n\n// Создание среза контактов с использованием createSlice\nconst contactsSlice = createSlice({\n  name: 'contacts', // Имя среза контактов\n  initialState: phoneContacts, // Начальное состояние контактов\n  reducers: {\n    addContact: {\n      reducer(state, action) {\n        state.items.push(action.payload); // Добавление нового контакта в список контактов\n      },\n    },\n    prepare(newContact) {\n      return {\n        payload: { id: nanoid(), ...newContact }, // Подготовка данных для добавления контакта с уникальным идентификатором\n      };\n    },\n    removeContact(state, action) {\n      const index = state.items.findIndex(\n        contact => contact.id !== action.payload\n      );\n      state.items.splice(index, 1); // Удаление контакта из списка контактов\n    },\n  },\n});\n\n// Экспорт действий addContact и removeContact из среза контактов\nexport const { addContact, removeContact } = contactsSlice.actions;\n\n// Создание персистентного редьюсера для сохранения состояния контактов с использованием redux-persist\nexport const contactsReducer = persistReducer(\n  { key: 'contacts', storage },\n  contactsSlice.reducer\n);\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AACtD,SAASC,cAAc,QAAQ,eAAe;AAC9C,OAAOC,OAAO,MAAM,2BAA2B;;AAE/C;AACA,MAAMC,aAAa,GAAG;EACpBC,KAAK,EAAE,CACL;IAAEC,EAAE,EAAE,MAAM;IAAEC,IAAI,EAAE,YAAY;IAAEC,MAAM,EAAE;EAAY,CAAC,EACvD;IAAEF,EAAE,EAAE,MAAM;IAAEC,IAAI,EAAE,YAAY;IAAEC,MAAM,EAAE;EAAY,CAAC,EACvD;IAAEF,EAAE,EAAE,MAAM;IAAEC,IAAI,EAAE,WAAW;IAAEC,MAAM,EAAE;EAAY,CAAC,EACtD;IAAEF,EAAE,EAAE,MAAM;IAAEC,IAAI,EAAE,iBAAiB;IAAEC,MAAM,EAAE;EAAY,CAAC;AAEhE,CAAC;;AAED;AACA,MAAMC,aAAa,GAAGT,WAAW,CAAC;EAChCO,IAAI,EAAE,UAAU;EAAE;EAClBG,YAAY,EAAEN,aAAa;EAAE;EAC7BO,QAAQ,EAAE;IACRC,UAAU,EAAE;MACVC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;QACrBD,KAAK,CAACT,KAAK,CAACW,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC;MACpC;IACF,CAAC;;IACDC,OAAOA,CAACC,UAAU,EAAE;MAClB,OAAO;QACLF,OAAO,EAAE;UAAEX,EAAE,EAAEL,MAAM,CAAC,CAAC;UAAE,GAAGkB;QAAW,CAAC,CAAE;MAC5C,CAAC;IACH,CAAC;;IACDC,aAAaA,CAACN,KAAK,EAAEC,MAAM,EAAE;MAC3B,MAAMM,KAAK,GAAGP,KAAK,CAACT,KAAK,CAACiB,SAAS,CACjCC,OAAO,IAAIA,OAAO,CAACjB,EAAE,KAAKS,MAAM,CAACE,OACnC,CAAC;MACDH,KAAK,CAACT,KAAK,CAACmB,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;IAChC;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAET,UAAU;EAAEQ;AAAc,CAAC,GAAGX,aAAa,CAACgB,OAAO;;AAElE;AACA,OAAO,MAAMC,eAAe,GAAGxB,cAAc,CAC3C;EAAEyB,GAAG,EAAE,UAAU;EAAExB;AAAQ,CAAC,EAC5BM,aAAa,CAACI,OAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}